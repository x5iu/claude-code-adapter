// Code generated by defc, DO NOT EDIT.

package provider

import (
	"bufio"
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/textproto"
	"strings"
	"text/template"

	"github.com/spf13/viper"
	"github.com/x5iu/claude-code-adapter/pkg/datatypes/anthropic"
	"github.com/x5iu/claude-code-adapter/pkg/datatypes/openrouter"
	"github.com/x5iu/claude-code-adapter/pkg/utils"
	__rt "github.com/x5iu/defc/runtime"
)

const (
	ProviderMethodMakeAnthropicMessagesRequest   = "MakeAnthropicMessagesRequest"
	ProviderMethodGenerateAnthropicMessage       = "GenerateAnthropicMessage"
	ProviderMethodCountAnthropicTokens           = "CountAnthropicTokens"
	ProviderMethodCreateOpenRouterChatCompletion = "CreateOpenRouterChatCompletion"
)

func NewProvider() Provider {
	return &implProvider{}
}

type implProvider struct{}

var (
	addrProviderTmplMakeAnthropicMessagesRequest     = template.Must(template.New("AddressMakeAnthropicMessagesRequest").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("{{ get_config \"anthropic.base_url\" }}/v1/messages"))
	headerProviderTmplMakeAnthropicMessagesRequest   = template.Must(template.New("HeaderMakeAnthropicMessagesRequest").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("Content-Type: application/json\r\nX-API-Key: {{ get_config \"anthropic.api_key\" }}\r\nAnthropic-Version: {{ get_config \"anthropic.version\" }}\r\n\r\n"))
	addrProviderTmplGenerateAnthropicMessage         = template.Must(template.New("AddressGenerateAnthropicMessage").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("{{ get_config \"anthropic.base_url\" }}/v1/messages"))
	headerProviderTmplGenerateAnthropicMessage       = template.Must(template.New("HeaderGenerateAnthropicMessage").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("Content-Type: application/json\r\nX-API-Key: {{ get_config \"anthropic.api_key\" }}\r\nAnthropic-Version: {{ get_config \"anthropic.version\" }}\r\n\r\n{{ json_encode .req }}"))
	addrProviderTmplCountAnthropicTokens             = template.Must(template.New("AddressCountAnthropicTokens").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("{{ get_config \"anthropic.base_url\" }}/v1/messages/count_tokens"))
	headerProviderTmplCountAnthropicTokens           = template.Must(template.New("HeaderCountAnthropicTokens").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("Content-Type: application/json\r\nX-API-Key: {{ get_config \"anthropic.api_key\" }}\r\nAnthropic-Version: {{ get_config \"anthropic.version\" }}\r\n\r\n{{ json_encode .req }}"))
	addrProviderTmplCreateOpenRouterChatCompletion   = template.Must(template.New("AddressCreateOpenRouterChatCompletion").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("{{ get_config \"openrouter.base_url\" }}/v1/chat/completions"))
	headerProviderTmplCreateOpenRouterChatCompletion = template.Must(template.New("HeaderCreateOpenRouterChatCompletion").Funcs(template.FuncMap{"get_config": viper.GetString, "json_encode": utils.JSONEncode}).Parse("Content-Type: application/json\r\nAuthorization: Bearer {{ get_config \"openrouter.api_key\" }}\r\n\r\n{{ json_encode .req }}"))
)

func (*implProvider) responseHandler() *ResponseHandler {
	return new(ResponseHandler)
}

func (__imp *implProvider) MakeAnthropicMessagesRequest(ctx context.Context, req io.Reader, opts ...RequestOption) (io.ReadCloser, http.Header, error) {
	__maxRetry := 2

	var (
		__reader         = any(req)
		__reset          interface{ Reset() error }
		__readerCanReset bool
	)

	if __reset, __readerCanReset = __reader.(interface{ Reset() error }); !__readerCanReset {
		__maxRetry = 0
	}

	__retryCount := 0
__RETRY:
	var (
		v0MakeAnthropicMessagesRequest  io.ReadCloser
		v1MakeAnthropicMessagesRequest  http.Header
		errMakeAnthropicMessagesRequest error
	)

	if __readerCanReset {
		if errMakeAnthropicMessagesRequest = __reset.Reset(); errMakeAnthropicMessagesRequest != nil {
			return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, errMakeAnthropicMessagesRequest
		}
	}

	v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, errMakeAnthropicMessagesRequest = __imp.__MakeAnthropicMessagesRequest(ctx, req, opts...)
	if errMakeAnthropicMessagesRequest != nil {
		if __retryCount < __maxRetry {
			if __getResponse, ok := errMakeAnthropicMessagesRequest.(__rt.FutureResponseError); ok {
				__getResponse.Response().Body.Close()
			}
			__retryCount++
			goto __RETRY
		}
	}
	return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, errMakeAnthropicMessagesRequest
}

func (__imp *implProvider) __MakeAnthropicMessagesRequest(ctx context.Context, req io.Reader, opts ...RequestOption) (io.ReadCloser, http.Header, error) {

	addrMakeAnthropicMessagesRequest := __rt.GetBuffer()
	defer __rt.PutBuffer(addrMakeAnthropicMessagesRequest)
	defer addrMakeAnthropicMessagesRequest.Reset()

	headerMakeAnthropicMessagesRequest := __rt.GetBuffer()
	defer __rt.PutBuffer(headerMakeAnthropicMessagesRequest)
	defer headerMakeAnthropicMessagesRequest.Reset()

	var (
		v0MakeAnthropicMessagesRequest = __rt.New[io.ReadCloser]()
		v1MakeAnthropicMessagesRequest = __rt.New[http.Header]()
	)

	var (
		errMakeAnthropicMessagesRequest          error
		httpResponseMakeAnthropicMessagesRequest *http.Response
		responseMakeAnthropicMessagesRequest     __rt.FutureResponse = __imp.responseHandler()
	)

	if errMakeAnthropicMessagesRequest = addrProviderTmplMakeAnthropicMessagesRequest.Execute(addrMakeAnthropicMessagesRequest, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error building 'MakeAnthropicMessagesRequest' url: %w", errMakeAnthropicMessagesRequest)
	}

	if errMakeAnthropicMessagesRequest = headerProviderTmplMakeAnthropicMessagesRequest.Execute(headerMakeAnthropicMessagesRequest, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error building 'MakeAnthropicMessagesRequest' header: %w", errMakeAnthropicMessagesRequest)
	}
	bufReaderMakeAnthropicMessagesRequest := bufio.NewReader(headerMakeAnthropicMessagesRequest)
	mimeHeaderMakeAnthropicMessagesRequest, errMakeAnthropicMessagesRequest := textproto.NewReader(bufReaderMakeAnthropicMessagesRequest).ReadMIMEHeader()
	if errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error reading 'MakeAnthropicMessagesRequest' header: %w", errMakeAnthropicMessagesRequest)
	}

	urlMakeAnthropicMessagesRequest := addrMakeAnthropicMessagesRequest.String()
	requestMakeAnthropicMessagesRequest, errMakeAnthropicMessagesRequest := http.NewRequestWithContext(ctx, "POST", urlMakeAnthropicMessagesRequest, req)
	if errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error building 'MakeAnthropicMessagesRequest' request: %w", errMakeAnthropicMessagesRequest)
	}

	for kMakeAnthropicMessagesRequest, vvMakeAnthropicMessagesRequest := range mimeHeaderMakeAnthropicMessagesRequest {
		for _, vMakeAnthropicMessagesRequest := range vvMakeAnthropicMessagesRequest {
			requestMakeAnthropicMessagesRequest.Header.Add(kMakeAnthropicMessagesRequest, vMakeAnthropicMessagesRequest)
		}
	}

	requestMakeAnthropicMessagesRequest.Header.Add("Accept-Encoding", "gzip")

	for _, opt := range opts {
		if opt != nil {
			opt(requestMakeAnthropicMessagesRequest)
		}
	}

	httpResponseMakeAnthropicMessagesRequest, errMakeAnthropicMessagesRequest = http.DefaultClient.Do(requestMakeAnthropicMessagesRequest)

	if errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error sending 'MakeAnthropicMessagesRequest' request: %w", errMakeAnthropicMessagesRequest)
	}

	func() {
		for _, contentEncoding := range httpResponseMakeAnthropicMessagesRequest.Header.Values("Content-Encoding") {
			if commaIndex := strings.IndexByte(contentEncoding, ','); commaIndex >= 0 {
				contentEncoding = contentEncoding[:commaIndex]
			}
			if strings.TrimSpace(contentEncoding) == "gzip" {
				httpResponseMakeAnthropicMessagesRequest.Body = &__rt.GzipReadCloser{R: httpResponseMakeAnthropicMessagesRequest.Body}
				return
			}
		}
	}()

	if errMakeAnthropicMessagesRequest = responseMakeAnthropicMessagesRequest.FromResponse("MakeAnthropicMessagesRequest", httpResponseMakeAnthropicMessagesRequest); errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error converting 'MakeAnthropicMessagesRequest' response: %w", errMakeAnthropicMessagesRequest)
	}

	addrMakeAnthropicMessagesRequest.Reset()
	headerMakeAnthropicMessagesRequest.Reset()

	if errMakeAnthropicMessagesRequest = responseMakeAnthropicMessagesRequest.Err(); errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error returned from 'MakeAnthropicMessagesRequest' response: %w", errMakeAnthropicMessagesRequest)
	}

	if errMakeAnthropicMessagesRequest = responseMakeAnthropicMessagesRequest.ScanValues(&v0MakeAnthropicMessagesRequest, &v1MakeAnthropicMessagesRequest); errMakeAnthropicMessagesRequest != nil {
		return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, fmt.Errorf("error scanning value from 'MakeAnthropicMessagesRequest' response: %w", errMakeAnthropicMessagesRequest)
	}

	return v0MakeAnthropicMessagesRequest, v1MakeAnthropicMessagesRequest, nil
}

func (__imp *implProvider) GenerateAnthropicMessage(ctx context.Context, req *anthropic.GenerateMessageRequest, opts ...RequestOption) (anthropic.MessageStream, http.Header, error) {
	__maxRetry := 2

	__retryCount := 0
__RETRY:
	var (
		v0GenerateAnthropicMessage  anthropic.MessageStream
		v1GenerateAnthropicMessage  http.Header
		errGenerateAnthropicMessage error
	)

	v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, errGenerateAnthropicMessage = __imp.__GenerateAnthropicMessage(ctx, req, opts...)
	if errGenerateAnthropicMessage != nil {
		if __retryCount < __maxRetry {
			if __getResponse, ok := errGenerateAnthropicMessage.(__rt.FutureResponseError); ok {
				__getResponse.Response().Body.Close()
			}
			__retryCount++
			goto __RETRY
		}
	}
	return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, errGenerateAnthropicMessage
}

func (__imp *implProvider) __GenerateAnthropicMessage(ctx context.Context, req *anthropic.GenerateMessageRequest, opts ...RequestOption) (anthropic.MessageStream, http.Header, error) {

	addrGenerateAnthropicMessage := __rt.GetBuffer()
	defer __rt.PutBuffer(addrGenerateAnthropicMessage)
	defer addrGenerateAnthropicMessage.Reset()

	headerGenerateAnthropicMessage := __rt.GetBuffer()
	defer __rt.PutBuffer(headerGenerateAnthropicMessage)
	defer headerGenerateAnthropicMessage.Reset()

	var (
		v0GenerateAnthropicMessage = __rt.New[anthropic.MessageStream]()
		v1GenerateAnthropicMessage = __rt.New[http.Header]()
	)

	var (
		errGenerateAnthropicMessage          error
		httpResponseGenerateAnthropicMessage *http.Response
		responseGenerateAnthropicMessage     __rt.FutureResponse = __imp.responseHandler()
	)

	if errGenerateAnthropicMessage = addrProviderTmplGenerateAnthropicMessage.Execute(addrGenerateAnthropicMessage, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error building 'GenerateAnthropicMessage' url: %w", errGenerateAnthropicMessage)
	}

	if errGenerateAnthropicMessage = headerProviderTmplGenerateAnthropicMessage.Execute(headerGenerateAnthropicMessage, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error building 'GenerateAnthropicMessage' header: %w", errGenerateAnthropicMessage)
	}
	bufReaderGenerateAnthropicMessage := bufio.NewReader(headerGenerateAnthropicMessage)
	mimeHeaderGenerateAnthropicMessage, errGenerateAnthropicMessage := textproto.NewReader(bufReaderGenerateAnthropicMessage).ReadMIMEHeader()
	if errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error reading 'GenerateAnthropicMessage' header: %w", errGenerateAnthropicMessage)
	}

	urlGenerateAnthropicMessage := addrGenerateAnthropicMessage.String()
	requestBodyGenerateAnthropicMessage, errGenerateAnthropicMessage := io.ReadAll(bufReaderGenerateAnthropicMessage)
	if errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error reading 'GenerateAnthropicMessage' request body: %w", errGenerateAnthropicMessage)
	}
	requestGenerateAnthropicMessage, errGenerateAnthropicMessage := http.NewRequestWithContext(ctx, "POST", urlGenerateAnthropicMessage, bytes.NewReader(requestBodyGenerateAnthropicMessage))
	if errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error building 'GenerateAnthropicMessage' request: %w", errGenerateAnthropicMessage)
	}

	for kGenerateAnthropicMessage, vvGenerateAnthropicMessage := range mimeHeaderGenerateAnthropicMessage {
		for _, vGenerateAnthropicMessage := range vvGenerateAnthropicMessage {
			requestGenerateAnthropicMessage.Header.Add(kGenerateAnthropicMessage, vGenerateAnthropicMessage)
		}
	}

	requestGenerateAnthropicMessage.Header.Add("Accept-Encoding", "gzip")

	for _, opt := range opts {
		if opt != nil {
			opt(requestGenerateAnthropicMessage)
		}
	}

	httpResponseGenerateAnthropicMessage, errGenerateAnthropicMessage = http.DefaultClient.Do(requestGenerateAnthropicMessage)

	if errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error sending 'GenerateAnthropicMessage' request: %w", errGenerateAnthropicMessage)
	}

	func() {
		for _, contentEncoding := range httpResponseGenerateAnthropicMessage.Header.Values("Content-Encoding") {
			if commaIndex := strings.IndexByte(contentEncoding, ','); commaIndex >= 0 {
				contentEncoding = contentEncoding[:commaIndex]
			}
			if strings.TrimSpace(contentEncoding) == "gzip" {
				httpResponseGenerateAnthropicMessage.Body = &__rt.GzipReadCloser{R: httpResponseGenerateAnthropicMessage.Body}
				return
			}
		}
	}()

	if errGenerateAnthropicMessage = responseGenerateAnthropicMessage.FromResponse("GenerateAnthropicMessage", httpResponseGenerateAnthropicMessage); errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error converting 'GenerateAnthropicMessage' response: %w", errGenerateAnthropicMessage)
	}

	addrGenerateAnthropicMessage.Reset()
	headerGenerateAnthropicMessage.Reset()

	if errGenerateAnthropicMessage = responseGenerateAnthropicMessage.Err(); errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error returned from 'GenerateAnthropicMessage' response: %w", errGenerateAnthropicMessage)
	}

	if errGenerateAnthropicMessage = responseGenerateAnthropicMessage.ScanValues(&v0GenerateAnthropicMessage, &v1GenerateAnthropicMessage); errGenerateAnthropicMessage != nil {
		return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, fmt.Errorf("error scanning value from 'GenerateAnthropicMessage' response: %w", errGenerateAnthropicMessage)
	}

	return v0GenerateAnthropicMessage, v1GenerateAnthropicMessage, nil
}

func (__imp *implProvider) CountAnthropicTokens(ctx context.Context, req *anthropic.CountTokensRequest, opts ...RequestOption) (*anthropic.Usage, error) {
	__maxRetry := 1

	__retryCount := 0
__RETRY:
	var (
		v0CountAnthropicTokens  *anthropic.Usage
		errCountAnthropicTokens error
	)

	v0CountAnthropicTokens, errCountAnthropicTokens = __imp.__CountAnthropicTokens(ctx, req, opts...)
	if errCountAnthropicTokens != nil {
		if __retryCount < __maxRetry {
			if __getResponse, ok := errCountAnthropicTokens.(__rt.FutureResponseError); ok {
				__getResponse.Response().Body.Close()
			}
			__retryCount++
			goto __RETRY
		}
	}
	return v0CountAnthropicTokens, errCountAnthropicTokens
}

func (__imp *implProvider) __CountAnthropicTokens(ctx context.Context, req *anthropic.CountTokensRequest, opts ...RequestOption) (*anthropic.Usage, error) {

	addrCountAnthropicTokens := __rt.GetBuffer()
	defer __rt.PutBuffer(addrCountAnthropicTokens)
	defer addrCountAnthropicTokens.Reset()

	headerCountAnthropicTokens := __rt.GetBuffer()
	defer __rt.PutBuffer(headerCountAnthropicTokens)
	defer headerCountAnthropicTokens.Reset()

	var (
		v0CountAnthropicTokens = new(anthropic.Usage)
	)

	var (
		errCountAnthropicTokens          error
		httpResponseCountAnthropicTokens *http.Response
		responseCountAnthropicTokens     __rt.FutureResponse = __imp.responseHandler()
	)

	if errCountAnthropicTokens = addrProviderTmplCountAnthropicTokens.Execute(addrCountAnthropicTokens, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error building 'CountAnthropicTokens' url: %w", errCountAnthropicTokens)
	}

	if errCountAnthropicTokens = headerProviderTmplCountAnthropicTokens.Execute(headerCountAnthropicTokens, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error building 'CountAnthropicTokens' header: %w", errCountAnthropicTokens)
	}
	bufReaderCountAnthropicTokens := bufio.NewReader(headerCountAnthropicTokens)
	mimeHeaderCountAnthropicTokens, errCountAnthropicTokens := textproto.NewReader(bufReaderCountAnthropicTokens).ReadMIMEHeader()
	if errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error reading 'CountAnthropicTokens' header: %w", errCountAnthropicTokens)
	}

	urlCountAnthropicTokens := addrCountAnthropicTokens.String()
	requestBodyCountAnthropicTokens, errCountAnthropicTokens := io.ReadAll(bufReaderCountAnthropicTokens)
	if errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error reading 'CountAnthropicTokens' request body: %w", errCountAnthropicTokens)
	}
	requestCountAnthropicTokens, errCountAnthropicTokens := http.NewRequestWithContext(ctx, "POST", urlCountAnthropicTokens, bytes.NewReader(requestBodyCountAnthropicTokens))
	if errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error building 'CountAnthropicTokens' request: %w", errCountAnthropicTokens)
	}

	for kCountAnthropicTokens, vvCountAnthropicTokens := range mimeHeaderCountAnthropicTokens {
		for _, vCountAnthropicTokens := range vvCountAnthropicTokens {
			requestCountAnthropicTokens.Header.Add(kCountAnthropicTokens, vCountAnthropicTokens)
		}
	}

	requestCountAnthropicTokens.Header.Add("Accept-Encoding", "gzip")

	for _, opt := range opts {
		if opt != nil {
			opt(requestCountAnthropicTokens)
		}
	}

	httpResponseCountAnthropicTokens, errCountAnthropicTokens = http.DefaultClient.Do(requestCountAnthropicTokens)

	if errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error sending 'CountAnthropicTokens' request: %w", errCountAnthropicTokens)
	}

	func() {
		for _, contentEncoding := range httpResponseCountAnthropicTokens.Header.Values("Content-Encoding") {
			if commaIndex := strings.IndexByte(contentEncoding, ','); commaIndex >= 0 {
				contentEncoding = contentEncoding[:commaIndex]
			}
			if strings.TrimSpace(contentEncoding) == "gzip" {
				httpResponseCountAnthropicTokens.Body = &__rt.GzipReadCloser{R: httpResponseCountAnthropicTokens.Body}
				return
			}
		}
	}()

	if errCountAnthropicTokens = responseCountAnthropicTokens.FromResponse("CountAnthropicTokens", httpResponseCountAnthropicTokens); errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error converting 'CountAnthropicTokens' response: %w", errCountAnthropicTokens)
	}

	addrCountAnthropicTokens.Reset()
	headerCountAnthropicTokens.Reset()

	if errCountAnthropicTokens = responseCountAnthropicTokens.Err(); errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error returned from 'CountAnthropicTokens' response: %w", errCountAnthropicTokens)
	}

	if errCountAnthropicTokens = responseCountAnthropicTokens.ScanValues(v0CountAnthropicTokens); errCountAnthropicTokens != nil {
		return v0CountAnthropicTokens, fmt.Errorf("error scanning value from 'CountAnthropicTokens' response: %w", errCountAnthropicTokens)
	}

	return v0CountAnthropicTokens, nil
}

func (__imp *implProvider) CreateOpenRouterChatCompletion(ctx context.Context, req *openrouter.CreateChatCompletionRequest, opts ...RequestOption) (openrouter.ChatCompletionStream, http.Header, error) {
	__maxRetry := 2

	__retryCount := 0
__RETRY:
	var (
		v0CreateOpenRouterChatCompletion  openrouter.ChatCompletionStream
		v1CreateOpenRouterChatCompletion  http.Header
		errCreateOpenRouterChatCompletion error
	)

	v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, errCreateOpenRouterChatCompletion = __imp.__CreateOpenRouterChatCompletion(ctx, req, opts...)
	if errCreateOpenRouterChatCompletion != nil {
		if __retryCount < __maxRetry {
			if __getResponse, ok := errCreateOpenRouterChatCompletion.(__rt.FutureResponseError); ok {
				__getResponse.Response().Body.Close()
			}
			__retryCount++
			goto __RETRY
		}
	}
	return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, errCreateOpenRouterChatCompletion
}

func (__imp *implProvider) __CreateOpenRouterChatCompletion(ctx context.Context, req *openrouter.CreateChatCompletionRequest, opts ...RequestOption) (openrouter.ChatCompletionStream, http.Header, error) {

	addrCreateOpenRouterChatCompletion := __rt.GetBuffer()
	defer __rt.PutBuffer(addrCreateOpenRouterChatCompletion)
	defer addrCreateOpenRouterChatCompletion.Reset()

	headerCreateOpenRouterChatCompletion := __rt.GetBuffer()
	defer __rt.PutBuffer(headerCreateOpenRouterChatCompletion)
	defer headerCreateOpenRouterChatCompletion.Reset()

	var (
		v0CreateOpenRouterChatCompletion = __rt.New[openrouter.ChatCompletionStream]()
		v1CreateOpenRouterChatCompletion = __rt.New[http.Header]()
	)

	var (
		errCreateOpenRouterChatCompletion          error
		httpResponseCreateOpenRouterChatCompletion *http.Response
		responseCreateOpenRouterChatCompletion     __rt.FutureResponse = __imp.responseHandler()
	)

	if errCreateOpenRouterChatCompletion = addrProviderTmplCreateOpenRouterChatCompletion.Execute(addrCreateOpenRouterChatCompletion, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error building 'CreateOpenRouterChatCompletion' url: %w", errCreateOpenRouterChatCompletion)
	}

	if errCreateOpenRouterChatCompletion = headerProviderTmplCreateOpenRouterChatCompletion.Execute(headerCreateOpenRouterChatCompletion, map[string]any{
		"ctx":  ctx,
		"req":  req,
		"opts": opts,
	}); errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error building 'CreateOpenRouterChatCompletion' header: %w", errCreateOpenRouterChatCompletion)
	}
	bufReaderCreateOpenRouterChatCompletion := bufio.NewReader(headerCreateOpenRouterChatCompletion)
	mimeHeaderCreateOpenRouterChatCompletion, errCreateOpenRouterChatCompletion := textproto.NewReader(bufReaderCreateOpenRouterChatCompletion).ReadMIMEHeader()
	if errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error reading 'CreateOpenRouterChatCompletion' header: %w", errCreateOpenRouterChatCompletion)
	}

	urlCreateOpenRouterChatCompletion := addrCreateOpenRouterChatCompletion.String()
	requestBodyCreateOpenRouterChatCompletion, errCreateOpenRouterChatCompletion := io.ReadAll(bufReaderCreateOpenRouterChatCompletion)
	if errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error reading 'CreateOpenRouterChatCompletion' request body: %w", errCreateOpenRouterChatCompletion)
	}
	requestCreateOpenRouterChatCompletion, errCreateOpenRouterChatCompletion := http.NewRequestWithContext(ctx, "POST", urlCreateOpenRouterChatCompletion, bytes.NewReader(requestBodyCreateOpenRouterChatCompletion))
	if errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error building 'CreateOpenRouterChatCompletion' request: %w", errCreateOpenRouterChatCompletion)
	}

	for kCreateOpenRouterChatCompletion, vvCreateOpenRouterChatCompletion := range mimeHeaderCreateOpenRouterChatCompletion {
		for _, vCreateOpenRouterChatCompletion := range vvCreateOpenRouterChatCompletion {
			requestCreateOpenRouterChatCompletion.Header.Add(kCreateOpenRouterChatCompletion, vCreateOpenRouterChatCompletion)
		}
	}

	requestCreateOpenRouterChatCompletion.Header.Add("Accept-Encoding", "gzip")

	for _, opt := range opts {
		if opt != nil {
			opt(requestCreateOpenRouterChatCompletion)
		}
	}

	httpResponseCreateOpenRouterChatCompletion, errCreateOpenRouterChatCompletion = http.DefaultClient.Do(requestCreateOpenRouterChatCompletion)

	if errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error sending 'CreateOpenRouterChatCompletion' request: %w", errCreateOpenRouterChatCompletion)
	}

	func() {
		for _, contentEncoding := range httpResponseCreateOpenRouterChatCompletion.Header.Values("Content-Encoding") {
			if commaIndex := strings.IndexByte(contentEncoding, ','); commaIndex >= 0 {
				contentEncoding = contentEncoding[:commaIndex]
			}
			if strings.TrimSpace(contentEncoding) == "gzip" {
				httpResponseCreateOpenRouterChatCompletion.Body = &__rt.GzipReadCloser{R: httpResponseCreateOpenRouterChatCompletion.Body}
				return
			}
		}
	}()

	if errCreateOpenRouterChatCompletion = responseCreateOpenRouterChatCompletion.FromResponse("CreateOpenRouterChatCompletion", httpResponseCreateOpenRouterChatCompletion); errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error converting 'CreateOpenRouterChatCompletion' response: %w", errCreateOpenRouterChatCompletion)
	}

	addrCreateOpenRouterChatCompletion.Reset()
	headerCreateOpenRouterChatCompletion.Reset()

	if errCreateOpenRouterChatCompletion = responseCreateOpenRouterChatCompletion.Err(); errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error returned from 'CreateOpenRouterChatCompletion' response: %w", errCreateOpenRouterChatCompletion)
	}

	if errCreateOpenRouterChatCompletion = responseCreateOpenRouterChatCompletion.ScanValues(&v0CreateOpenRouterChatCompletion, &v1CreateOpenRouterChatCompletion); errCreateOpenRouterChatCompletion != nil {
		return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, fmt.Errorf("error scanning value from 'CreateOpenRouterChatCompletion' response: %w", errCreateOpenRouterChatCompletion)
	}

	return v0CreateOpenRouterChatCompletion, v1CreateOpenRouterChatCompletion, nil
}
